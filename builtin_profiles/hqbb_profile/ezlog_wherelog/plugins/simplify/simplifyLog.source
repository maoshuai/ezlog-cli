# 改插件主要是对日志进行简化，比如过长但不必要的日志头
# 在过滤后单线程日志后，对其进行进一步简化

# 这是必须实现的方法
simplifyLogs()
{
	# 格式化后日志的根目录
	local threadLogDir="$1"
	_simplifyJdbcLog "$threadLogDir/*hqbb_sql*"

	_simplifySqlTimeLog "$threadLogDir/*SQL_TIME.txt*"
	
	_simplifyWsTimeLog "$threadLogDir/*WS_TIME.txt*"

	_removeUnUsedTitle "$threadLogDir/*BITS_LOG.txt*"

	_removeUnUsedTitle "$threadLogDir/*DUMP_LOG.txt*"

	_removeUnUsedTitle "$threadLogDir/*ROOT_LOG.txt*"

	_removeUnUsedTitle "$threadLogDir/*TF_LOG.txt*"

	_removeUnUsedTitle "$threadLogDir/*SOAP_LOG.txt*"

	_removeUnUsedTitle "$threadLogDir/*LOGSWITCH_LOG.txt*"

}

_removeUnUsedTitle()
{
	local filePattern="$1"
	if [ ! -e  $filePattern ];then
		logInfo "No file found, skip simplify: $filePattern"
		return 0
	fi
	local fileName="`echo $filePattern`"
	logInfo "remove title of log: $fileName"

	cat ${fileName} |
				sed 's/\(20[0-9]\{2\}\-[0-1][0-9]\-[0-3][0-9] [0-2][0-9]:[0-6][0-9]:[0-6][0-9],[0-9]\{3\}\) \[[^][]*\] \[[^][]*\]/\1/' >${fileName}_temp

	# 简化的，替换掉原始的文件
	rm -rf ${fileName}
	mv ${fileName}_temp ${fileName}
}

# 简化JDBC日志
_simplifyJdbcLog()
{
	local filePattern="$1"
	if [ ! -e  $filePattern ];then
		logInfo "No file found, skip simplify: $filePattern"
		return 0
	fi
	local fileName="`echo $filePattern`"
	logInfo "simplify log: $fileName"
	cat $fileName |
	fgrep -v "java.sql.Connection" | 
	awk -F "[" '{print $2, $6}' |
	sed 's/\] java.sql.PreparedStatement\]/ /g' |
	awk '
	{
		print
		if($0~/^20.* ==> Parameters/)
			{
				
				print "" # 打个空行，好区分每一个JDBC日志
				print "" # 打个空行，好区分每一个JDBC日志
			}
	}' >${fileName}_temp

	# 简化的，替换掉原始的文件
	rm -rf ${fileName}
	mv ${fileName}_temp ${fileName}

}

# 简化SQL_TIME日志
_simplifySqlTimeLog()
{

	local filePattern="$1"
	if [ ! -e  $filePattern ];then
		logInfo "No file found, skip simplify: $filePattern"
		return 0
	fi
	local fileName="`echo $filePattern`"
	logInfo "simplify log: $fileName"

	# 格式化统计信息，格式如下：
	# 2015-07-02 11:20:37,813          5 EUIF_BASE_AUTHORITY.selectOrgByOrgCode

	# 2016-04-08 14:16:50,551 [WebContainer : 0] [3301598-20160408144114254.711148 processId_getCustomerByCusNoProcess] [SQL_TIME] INFO   EUIF_BASE_AUTHORITY.selectUserByUserCode||FINISHED SUCCESS||Consumed Time:6 Milli Seconds.
	cat ${fileName} |
	# 2016-04-08 14:16:50,551 INFO   EUIF_BASE_AUTHORITY.selectUserByUserCode||FINISHED SUCCESS||Consumed Time:6 Milli Seconds.
	awk -F "[][]" '{print $1, $7}' |
	# 2016-04-08 14:16:50,551 INFO   EUIF_BASE_AUTHORITY.selectUserByUserCode FINISHED SUCCESS Consumed Time:6 Milli Seconds.
	awk -F "|" '{print $1, $3, $5 }' | 
	# 2016-04-08 14:16:50,551 INFO   EUIF_BASE_AUTHORITY.selectUserByUserCode FINISHED SUCCESS 6 Milli Seconds.
	sed  "s/Consumed Time://g" |
	awk '{printf "%10s %12s %8s %7s  %12s\n", $1, $2, $7, $6, $4}'> ${fileName}_temp

	rm -rf ${fileName}
	mv ${fileName}_temp ${fileName}
}


# 简化外系统接口
_simplifyWsTimeLog()
{
	# 与处理sql time相同
	_simplifySqlTimeLog "$@"
}